[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

class_name ModeController


signal ui_reset

func reset():
	set_mode(EXPLORE)
	enable_scrolling()
	emit_signal(\"reset\")
	drop_held_item()

############
# Base mode
############

enum {EXPLORE, HUD, CUTSCENE, VN}

var mode = EXPLORE
func set_mode(value):
	if [EXPLORE, HUD, CUTSCENE, VN].has(value):
		mode = value
		drop_held_item()
	else:
		printerr(\"Invalid mode: \" + str(value))

############
# Scrolling
############

var is_world_scrollable = true
func enable_scrolling():
	is_world_scrollable = true
func disable_scrolling():
	is_world_scrollable = false

############
# Item holding
############

var holding_item = null
var holding_callback = null

func get_is_player_holding_item():
	return (holding_item != null)
	
func hold(item, callback_str):
	holding_item = item
	holding_callback = callback_str
	Input.set_custom_mouse_cursor(item.icon)
	Input.set_custom_mouse_cursor(item.icon, Input.CURSOR_POINTING_HAND)
	
func apply_item(obj):
	if get_is_player_holding_item():
		holding_item.call(holding_callback, obj)
	else:
		printerr(\"No item held!\")

func drop_held_item():
	holding_item = null
	holding_callback = null
	Input.set_custom_mouse_cursor(null)
	Input.set_custom_mouse_cursor(null, Input.CURSOR_POINTING_HAND)
	
func _unhandled_input (  event:InputEvent ) :
	if !(self.get_is_player_holding_item()):
		return
	if not event is InputEventMouseButton:
		return
	if event.button_index != BUTTON_RIGHT or not event.pressed:
		return
		
	drop_held_item()"

[node name="ModeController" type="Node"]
script = SubResource( 1 )
