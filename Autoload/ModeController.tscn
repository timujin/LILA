[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

var is_cutscene = false
var is_modal_window = false
var is_combat = false
var is_player_controllable = true setget ,get_is_player_controllable

var holding_icon = null
var holding_item = null
var holding_callback = null

signal ui_reset

func reset():
	emit_signal(\"reset\")
	is_cutscene = false
	is_modal_window = false
	drop()
	
func start_cutscene():
	is_cutscene = true
	
func stop_cutscene():
	is_cutscene = false
	
func start_combat():
	is_combat = true

func stop_combat():
	is_combat = false
	

func get_is_player_controllable():
	return (!is_cutscene) and (!is_modal_window) and (!is_combat)
	
func get_is_player_holding_item():
	return (holding_item != null)
	
func hold(icon:Texture, item, callback_str):
	holding_icon = icon
	holding_item = item
	holding_callback = callback_str
	$\"/root/HUD\".hide_all()
	Input.set_custom_mouse_cursor(icon)
	Input.set_custom_mouse_cursor(icon, Input.CURSOR_POINTING_HAND)
	
func apply_item(obj):
	if get_is_player_holding_item():
		#holding_callback.call_func(obj)
		print(holding_item)
		print(holding_callback)
		holding_item.call(holding_callback, obj)
	else:
		printerr(\"No item held!\")

func drop():
	holding_item = null
	holding_callback = null
	Input.set_custom_mouse_cursor(null)
	Input.set_custom_mouse_cursor(null, Input.CURSOR_POINTING_HAND)
	
func _unhandled_input (  event:InputEvent ) :
	if !(self.get_is_player_holding_item()):
		return
	if self.is_cutscene:
		return
	if not event is InputEventMouseButton:
		return
	if event.button_index != BUTTON_RIGHT or not event.pressed:
		return
		
	drop()"

[node name="ModeController" type="Node"]
script = SubResource( 1 )
