[gd_scene load_steps=8 format=2]

[ext_resource path="res://Assets/Fonts/LilitaOne-Regular.ttf" type="DynamicFontData" id=1]
[ext_resource path="res://Assets/Placeholders/steelhordearmor.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Control

onready var mode = $\"/root/ModeController\"

var item_prototype = preload(\"res://Autoload/Inventory/ItemRenderUI.tscn\")
var slot_prototype = preload(\"res://Autoload/Inventory/EquipmentSlot.tscn\")

onready var place_for_items = $\"Modal/Window/HBoxContainer/Right/VBoxContainer/ScrollContainer/VBoxContainer\"
onready var place_for_slots = $\"Modal/Window/HBoxContainer/Left/Panel/ScrollContainer/VBoxContainer\"
onready var info_panel = $\"Modal/Window/HBoxContainer/Left/Description/InfoContainer\"
onready var char_doll = $\"Modal/Window/HBoxContainer/Left/Panel/ScrollContainer/VBoxContainer\"

onready var model = $\"/root/CharacterData\"

var current_item = null

func create_item(item, amount:int=1):
	var rend = item_prototype.instance()
	place_for_items.add_child(rend)
	rend.render(item, amount)
	rend.visible = true
	rend.connect(\"selected\", self, \"_on_Item_select\")
	
func clear():
	for child in place_for_items.get_children():
		child.queue_free()
	for child in place_for_slots.get_children():
		child.queue_free()
		
func render_all():
	clear()
	var items = model.items.keys()
	print(items)
	for item in items:
		if model.is_equipped(item):
			continue
		var it = InventoryItem.load_by_id(item)
		create_item(it, model.items[item])
	render_equipment()
		
func render_equipment():
	for slot in model.equipment_slots:
		var equipped = model.equipped.get(slot)
		var rend = slot_prototype.instance()
		rend.connect(\"selected\", self, \"_on_Equipment_select\")
		rend.connect(\"equip\", self, \"_on_Equip\")
		rend.connect(\"unequip\", self, \"_on_Unequip\")
		rend.init(slot)
		place_for_slots.add_child(rend)
		if equipped != null:
			equipped = InventoryItem.load_by_id(equipped)
			rend.equip(equipped.id, equipped.name, equipped.icon)
		
		
func filter(t:String):
	var ch = place_for_items.get_children()
	for child in ch:
		#print(\">%s %s<\" %[t, child.item.type])
		if t == \"All\" or t == child.item.type:
			child.visible = true
		else:
			child.visible = false

func _on_Item_select(item)->void:
	info_panel.render(item, 0)
	current_item = item
	
func _on_Equipment_select(item)->void:
	var it = InventoryItem.load_by_id(item)
	info_panel.render(it, 0)
	current_item = it

func _ready():
	#hide()
	mode.connect(\"reset\", self, \"on_reset\")
	
func on_reset():
	hide()
	
var ui_inventory_pressed = false

func hide():
	ui_inventory_pressed = false
	visible = false
	info_panel.clear()
	
func _process(delta):
	return
	if Input.is_action_pressed(\"ui_inventory\"):
		if not ui_inventory_pressed:
			ui_inventory_pressed = true
			$Modal.visible = !($Modal.visible)
			render_all()
	elif ui_inventory_pressed:
		ui_inventory_pressed = false
        ## done once when the key is released
	
	
func on_using_item(action:String):
	print(current_item)
	if current_item == null:
		printerr(\"Trying to use an unselected item!\")
		return
	current_item.iscript.use(action, current_item, get_tree())
	
func _on_Cancel_pressed():
	hide()

func _on_Unequip(slot:String):
	model.unequip(slot)
	render_all()
	
func _on_Equip(slot:String):
	if current_item != null:
		if model.is_equippable(current_item, slot):
			model.equip(current_item.id, slot)
	render_all()


func _on_Inventory_visibility_changed():
	render_all()
"

[sub_resource type="GDScript" id=2]
script/source = "extends Node
		
var items:Dictionary = {} # ID -> amount

var equipment_slots = [
	\"Head\", \"Chest\", \"Main\", \"Off\", \"Gloves\", \"Lapel\", \"Pants\", \"Shoes\", \"Amulet\", 
	\"Ring1\",\"Ring2\",
	\"Accessory1\",\"Accessory2\",\"Accessory3\",\"Accessory4\",\"Accessory5\"
]

var equipped:Dictionary = {} # Equipment slot -> ID

func try_equip(id:String, slot:String):
	if !equipment_slots.has(slot):
		printerr(\"No such slot exists: %s\" % slot)
		return
	if InventoryItem.load_by_id(id).equipment_slot != slot_type(slot):
		print(\"Can't equip into this slot\")
		return
	unequip(slot)
	equip(id, slot)
	
func equip(id:String, slot:String):
	equipped[slot] = id
	
func unequip(slot:String):
	equipped.erase(slot)
	
func is_equipped(id:String)->bool:
	for slot in equipped.keys():
		if equipped[slot] == id:
			return true
	return false
	
static func is_equippable(current_item, slot:String):
	return current_item.equipment_slot == slot_type(slot)

static func slot_type(slot:String)->String:
	if [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"].has(slot[slot.length()-1]):
		return slot_type(slot.substr(0,slot.length()-1))
	return slot



func add_item_silent(id:String, number:int = 1):
	if items.has(id):
		items[id] += number
	else:
		items[id] = number
		
func add_item(id:String, number:int = 1):
	add_item_silent(id, number)
	var itemget = preload(\"res://Autoload/Inventory/ItemGet.tscn\").instance()
	$\"/root\".add_child(itemget)
	itemget.render(id, number)
	return itemget
	
func remove_item(id:String, number:int = -1):
	if not items.has(id):
		printerr(\"Warning: trying to remove a nonexistent item: %s\" % id)
		return
	items[id] -= number
	if items[id] <= 0 or number == -1:
		items.erase(id)
		var todelete = null
		for key in equipped.keys():
			if id == equipped.get(key):
				todelete = key
				break
		if todelete != null:
			unequip(todelete)
	
		
func has_item(id:String, number:int = 1)->bool:
	if not items.has(id):
		return false
	return items[id] >= number
		
func _ready():
	self.items = {
		\"CoolHat\": 5,
		\"FortuneCookie\": 1,
		\"StarterKnife\": 0,
		\"BlahBlah\": 88
		}
	self.equipped = {
		\"Head\": \"CoolHat\",
		\"Main\": \"StarterKnife\",
		\"Lapel\": \"ErrorItem\"
		}

func _on_Misc_pressed():
	pass # Replace with function body.
"

[sub_resource type="GDScript" id=3]
script/source = "extends VBoxContainer

onready var itemname = $\"ItemName\"
onready var itemdescription = $\"ItemDescription\"
onready var itemhint = $\"ItemHint\"

onready var butt1 = $\"Buttons/Button\"
onready var butt2 = $\"Buttons/Button2\"
onready var butt3 = $\"Buttons/Button3\"

func render(item, amount:int):
	itemname.text = item.name
	itemdescription.text = item.long_description
	itemhint.text = item.hint
	
	butt1.visible = false
	butt2.visible = false
	butt3.visible = false
	#print(item.actions)
	var btnss = item.actions.split('\\n')
	var btns = []
	for btn in btnss:
		btns.append(btn.strip_edges())
	#print(btns)
	if btns[0] == \"\":
		return
	if btns.size () >= 1:
		butt1.visible = true
		butt1.text = btns[0]
	if btns.size () >= 2:
		butt2.visible = true
		butt2.text = btns[1]
	if btns.size () >= 3:
		butt3.visible = true
		butt3.text = btns[2]
		
func clear():
	itemname.text = \"Select an item\"
	itemdescription.text = \"\"
	itemhint.text = \"\"
	
	butt1.visible = false
	butt2.visible = false
	butt3.visible = false
	"

[sub_resource type="DynamicFont" id=4]
size = 21
font_data = ExtResource( 1 )

[sub_resource type="GDScript" id=5]
script/source = "extends Button

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_Button_pressed():
	$\"/root/WSHUD/Inventory\".on_using_item(self.text)
"

[node name="Inventory" type="Control"]
visible = false
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 1 )

[node name="Modeltodelete" type="Node" parent="."]
script = SubResource( 2 )

[node name="Modal" type="Panel" parent="."]
self_modulate = Color( 1, 1, 1, 0.439216 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Window" type="PanelContainer" parent="Modal"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -722.5
margin_top = -389.5
margin_right = 722.5
margin_bottom = 389.5

[node name="HBoxContainer" type="HBoxContainer" parent="Modal/Window"]
margin_left = 7.0
margin_top = 7.0
margin_right = 1438.0
margin_bottom = 772.0
alignment = 1

[node name="Left" type="VBoxContainer" parent="Modal/Window/HBoxContainer"]
margin_right = 395.0
margin_bottom = 765.0
size_flags_horizontal = 3

[node name="Panel" type="Panel" parent="Modal/Window/HBoxContainer/Left"]
margin_right = 395.0
margin_bottom = 380.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="ScrollContainer" type="ScrollContainer" parent="Modal/Window/HBoxContainer/Left/Panel"]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="VBoxContainer" type="VBoxContainer" parent="Modal/Window/HBoxContainer/Left/Panel/ScrollContainer"]
margin_right = 395.0
margin_bottom = 380.0
size_flags_horizontal = 3
size_flags_vertical = 3

[node name="Description" type="Panel" parent="Modal/Window/HBoxContainer/Left"]
margin_top = 384.0
margin_right = 395.0
margin_bottom = 765.0
size_flags_vertical = 3

[node name="InfoContainer" type="VBoxContainer" parent="Modal/Window/HBoxContainer/Left/Description"]
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 3 )

[node name="INFO" type="Label" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer"]
margin_right = 395.0
margin_bottom = 25.0
custom_fonts/font = SubResource( 4 )
text = "INFO"
align = 1
valign = 1

[node name="ItemName" type="Label" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer"]
margin_top = 29.0
margin_right = 395.0
margin_bottom = 43.0
text = "<ITEM NAME>"
align = 1
valign = 1

[node name="ItemDescription" type="Label" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer"]
margin_top = 47.0
margin_right = 395.0
margin_bottom = 78.0
text = "Item description.
May be multiline"
align = 1

[node name="ItemHint" type="Label" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer"]
margin_top = 82.0
margin_right = 395.0
margin_bottom = 113.0
text = "Item hint
Increases your nothing by zero"
align = 1

[node name="Buttons" type="HBoxContainer" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer"]
margin_top = 117.0
margin_right = 395.0
margin_bottom = 117.0
alignment = 1

[node name="Button" type="Button" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons"]
visible = false
margin_left = 173.0
margin_right = 221.0
margin_bottom = 20.0
text = "Apply"
script = SubResource( 5 )

[node name="Button2" type="Button" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons"]
visible = false
margin_left = 173.0
margin_right = 221.0
margin_bottom = 20.0
text = "Apply"
script = SubResource( 5 )

[node name="Button3" type="Button" parent="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons"]
visible = false
margin_left = 173.0
margin_right = 221.0
margin_bottom = 20.0
text = "Apply"
script = SubResource( 5 )

[node name="Right" type="PanelContainer" parent="Modal/Window/HBoxContainer"]
margin_left = 399.0
margin_right = 1431.0
margin_bottom = 765.0
size_flags_horizontal = 3
size_flags_stretch_ratio = 2.61

[node name="VBoxContainer" type="VBoxContainer" parent="Modal/Window/HBoxContainer/Right"]
margin_left = 7.0
margin_top = 7.0
margin_right = 1025.0
margin_bottom = 758.0

[node name="Title" type="HBoxContainer" parent="Modal/Window/HBoxContainer/Right/VBoxContainer"]
margin_right = 1018.0
margin_bottom = 58.0
size_flags_vertical = 3

[node name="Equipment" type="Button" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/Title"]
margin_right = 81.0
margin_bottom = 58.0
text = "Equipment"

[node name="Consumables" type="Button" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/Title"]
margin_left = 85.0
margin_right = 176.0
margin_bottom = 58.0
text = "Consumable"

[node name="Tools" type="Button" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/Title"]
margin_left = 180.0
margin_right = 226.0
margin_bottom = 58.0
text = "Tools"

[node name="Misc" type="Button" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/Title"]
margin_left = 230.0
margin_right = 272.0
margin_bottom = 58.0
text = "Misc"

[node name="All" type="Button" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/Title"]
margin_left = 276.0
margin_right = 305.0
margin_bottom = 58.0
text = "All"

[node name="Delimeter" type="Panel" parent="Modal/Window/HBoxContainer/Right/VBoxContainer"]
margin_top = 62.0
margin_right = 1018.0
margin_bottom = 67.0
size_flags_vertical = 3
size_flags_stretch_ratio = 0.1

[node name="ScrollContainer" type="ScrollContainer" parent="Modal/Window/HBoxContainer/Right/VBoxContainer"]
margin_top = 71.0
margin_right = 1018.0
margin_bottom = 751.0
size_flags_vertical = 3
size_flags_stretch_ratio = 11.6

[node name="VBoxContainer" type="VBoxContainer" parent="Modal/Window/HBoxContainer/Right/VBoxContainer/ScrollContainer"]
margin_right = 1018.0
size_flags_horizontal = 3

[node name="Button" type="Button" parent="Modal"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -114.476
margin_top = 45.4262
margin_right = -56.4758
margin_bottom = 100.426
icon = ExtResource( 2 )
[connection signal="visibility_changed" from="." to="." method="_on_Inventory_visibility_changed"]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button" to="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button" method="_on_Button_pressed"]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button2" to="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button2" method="_on_Button_pressed"]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button3" to="Modal/Window/HBoxContainer/Left/Description/InfoContainer/Buttons/Button3" method="_on_Button_pressed"]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Right/VBoxContainer/Title/Equipment" to="." method="filter" binds= [ "Equipment" ]]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Right/VBoxContainer/Title/Consumables" to="." method="filter" binds= [ "Consumable" ]]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Right/VBoxContainer/Title/Tools" to="." method="filter" binds= [ "Tool" ]]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Right/VBoxContainer/Title/Misc" to="." method="filter" binds= [ "Misc" ]]
[connection signal="pressed" from="Modal/Window/HBoxContainer/Right/VBoxContainer/Title/All" to="." method="filter" binds= [ "All" ]]
[connection signal="pressed" from="Modal/Button" to="." method="_on_Cancel_pressed"]
