[gd_scene load_steps=5 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

\"\"\"
Stores inventory, quests, etc. All the data associated with the PC.
This is intended to be pickled *in entirety*.
\"\"\"

onready var karma = get_node(\"Karma\")
onready var inventory = get_node(\"Inventory\")
onready var variables = get_node(\"Variables\")
onready var combatcards = get_node(\"CombatCards\")"

[sub_resource type="GDScript" id=2]
script/source = "extends Node

signal karma_got (karma, xp)

var karma = []

func _ready():
	add_xp(\"BlessedByTheGoddess\", 17)
	add_xp(\"Brutality\", 2)

func fetch_karma(id:String):
	# Loads an item by ID. If there is no such karma item, one is created
	
	for item in karma:
		if item.is_id(id):
			return item
	var n = KarmaInventory.new(id)
	karma.append(n)
	return n
	
func add_xp(id:String, amount:int):
	var item = fetch_karma(id)
	item.add_xp(amount)
	clear_empty_karma()
		
func add_levels(id:String, amount:int):
	var item = fetch_karma(id)
	item.add_levels(amount)
	clear_empty_karma()
			
func bring_up_to_level(id:String, amount:int):
	var item = fetch_karma(id)
	item.bring_up_to_level(amount)
	clear_empty_karma()
	
func get_levels(id:String):
	var item = fetch_karma(id)
	var res = item.level
	clear_empty_karma()
	return res
		
func is_enough_levels(id:String, amount:int):
	var item = fetch_karma(id)
	var res = item.is_enough_levels(amount)
	clear_empty_karma()
	return res
	
func drain_levels(id:String, amount:int):
	var item = fetch_karma(id)
	item.drain_levels(amount)
	clear_empty_karma()
	
func clear_empty_karma():
	var res = []
	for item in karma:
		if item.level == 0 and item.xp == 0:
			pass
		else:
			res.append(item)
	karma = res
	"

[sub_resource type="GDScript" id=3]
script/source = "extends Node

#signal item_got (item, amount)

var inventory = []

func _ready():
	add_item(\"GOEEsNote\", 1)
	add_item(\"HappyBirthdayDoorKey\", 5)

func fetch_item(id:String):
	# Loads an item by ID. If there is no such item, one is created
	
	for item in inventory:
		print(item)
		print(id)
		print(item.species.id)
		print(item.is_id(id))
		if item.is_id(id):
			return item
	var n = ItemInventory.new(id)
	inventory.append(n)
	return n
	
func add_item(id:String, amount:int):
	var item = fetch_item(id)
	item.add_items(amount)
	clear_empty()
	return item
	
func bring_up_to_amount(id:String, amount:int):
	var item = fetch_item(id)
	item.bring_up_to_amount(amount)
	clear_empty()
	
func remove_item(id:String, amount:int):
	var item = fetch_item(id)
	if amount == -1:
		item.amount = 0
	else:
		item.remove_items(amount)
	clear_empty()
	
func has_item(id:String, amount:int = -1):
	var item = fetch_item(id)
	if amount == -1:
		return item.amount > 0
	else:
		return item.amount >= amount
	
func clear_empty():
	var res = []
	for item in inventory:
		if item.amount == 0:
			pass
		else:
			res.append(item)
	inventory = res
	
"

[sub_resource type="GDScript" id=4]
script/source = "extends Node

var default_values:Dictionary = {
	\"newborn\" : true,
	\"ui_unlocked\": false,
	\"00002 Picked up GOEE's note\": false
}
\"\"\"
##########################
# Room pickleables
##########################

var pickled_rooms:Dictionary = {}

func pickle(room_path:NodePath, data:Dictionary):
	#ModeController.set_mode(ModeController.EXPLORE)
	# Room path must be to the room's .gd script, not .tscn
	assert(data != null)
	pickled_rooms[room_path] = data
	
func unpickle(room_path:NodePath, default:Dictionary):
	if not pickled_rooms.has(room_path):
		return default
	else:
		return pickled_rooms[room_path]
\"\"\"

##########################
# Regular-ass global variables
##########################

var values:Dictionary = {}

func set_value(key:String, value):
	values[key] = value
	
func get_value(key:String, default):
	if values.has(key):
		return values[key]
	else:
		if default_values.has(key):
			return default_values[key]
		else:
			return default
		
"

[node name="CharacterData" type="Node"]
script = SubResource( 1 )

[node name="Karma" type="Node" parent="."]
script = SubResource( 2 )

[node name="Inventory" type="Node" parent="."]
script = SubResource( 3 )

[node name="Variables" type="Node" parent="."]
script = SubResource( 4 )

[node name="CombatCards" type="Node" parent="."]
