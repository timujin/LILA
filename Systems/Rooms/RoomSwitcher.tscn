[gd_scene load_steps=4 format=2]

[ext_resource path="res://Systems/Rooms/WarpMenu.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

func r(id:String):
	return GlobalRegister.room(id)
	
####
# Room preloading
# This is to make the room loading work normally
# if you set it as the starting scene of the project
####

#var room_preloaded = true

#func _ready():
#	return
#	print(\"Room switcher ready\")
#	if room_preloaded:
#		var room_id = $\"/root/Room\".roomID
#		switch_to(room_id)
	
#####################
## ROOM LOADING #####
#####################


func current_room():
	return get_node_or_null(\"RoomLayer/Room\")

func switch_to_room(roomID):
	unload_room()
	
	var roomPrefab = r(roomID)
	var room = roomPrefab.instance()
	$RoomLayer.add_child(room)
	room.deserialize()
	#print(\"waiting for deserialize\")
	#yield(room, \"deserialized\")
	#print(\"deserialized\")
	room.shade_down()
	room.emit_signal(\"room_loaded\")
	

func unload_room():
	if current_room() == null: return
	var room = current_room()
	room.shade_up()
	room.serialize()
	#print(\"waiting for serialize\")
	#yield(room, \"serialized\")
	#print(\"serialized\")
	room.name = \"Room_old\"
	room.queue_free()

\"\"\"
func _ready():
	init_notifier()
	if $\"/root/Room\" == null: return # debug mode
	$\"/root/Room\".connect(\"room_loaded\", self, \"on_room_loaded\")
	
class LoadedNotifier:
	signal room_fully_loaded
	func poke():
		emit_signal(\"room_fully_loaded\")
	
var notifier setget , get_notifier

func init_notifier():
	if notifier == null: notifier = LoadedNotifier.new()

func get_notifier():
	init_notifier()
	if room_deserialized:
		notifier.call_deferred(\"poke\")
	return notifier
		
		
func on_room_loaded():
	room_deserialized = true
	init_notifier()
	notifier.poke()


func set_room_deserialized(value):
	room_deserialized = value
	if value:
		emit_signal(\"deserialize_complete\")

\"\"\"

\"\"\"
var room:Node = null

var in_the_process_of_loading = false

signal room_loaded
	
func _switch_room_obj(to_room):
	while $\"/root/Room\" == null:
		yield(get_tree(), \"idle_frame\")
		yield(get_tree(), \"idle_frame\")
	$\"/root/Room\".serialize()
	$\"/root/Room\".name = \"Todelete_room\"
	$\"/root/Todelete_room\".queue_free()
	while $\"/root/Todelete_room\" != null:
		yield(get_tree(), \"idle_frame\")
		yield(get_tree(), \"idle_frame\")
	room = to_room.instance()
	get_tree().get_root().add_child(room)
	room.connect(\"room_loaded\", self, \"on_room_loaded\")
	room.connect(\"room_loaded\", $LoadingScreen, \"set_visible\", [false])
	
	#var serializables = get_tree().get_nodes_in_group(\"serializable_room\")
	
\"\"\"	
\"\"\"
func deserialize_room():
	var objects = get_tree().get_nodes_in_group(\"serializable_room\")
	for object in objects:
		var data = Character.objects.deserialize($\"/root/Room\".roomID, object.get_path(), {})
		if data.size() > 0:
			safe_deserialize_object(object, data)
	RoomSwitcher.room_deserialized = true
	call_deferred(\"emit_signal\", \"room_loaded\")
\"\"\"
\"\"\"
func switch_to(id:String):
	in_the_process_of_loading = true
	ModeController.clicks_blocked = true
	$LoadingScreen.visible = true
	yield(get_tree(), \"idle_frame\")
	yield(get_tree(), \"idle_frame\")
	var roomscene = r(id)
	if roomscene == null:
		$LoadingScreen.visible = false
		printerr(\"!!! Room not found!: \" + id)
		assert(false)
	else:
		_switch_room_obj(roomscene)

func on_room_loaded():
	ModeController.clicks_blocked = false
	$LoadingScreen.visible = false
	in_the_process_of_loading = false
	emit_signal(\"room_loaded\")
\"\"\"
"

[sub_resource type="GDScript" id=2]
script/source = "extends CanvasLayer


const min_speed = 0
const max_speed = 1000
const horiz_margin = 0.2
const verti_margin = 0.2

func _process(delta):
	#return
	if $Room and $Room.is_scrolling:
		screen_scrolling(delta)
	
	
func screen_scrolling(delta):
	var vp = get_viewport()
	var mp = vp.get_mouse_position()
	
	var geom = $Room/Geometry
	#var limit_left = geom.get_node(\"CameraLimitLeft\").position.x - vp.size.x /2
	#var limit_right = geom.get_node(\"CameraLimitRight\").position.x - vp.size.x /2
	#var limit_top = geom.get_node(\"CameraLimitTop\").position.y - vp.size.y /2
	#var limit_bottom = geom.get_node(\"CameraLimitBottom\").position.y - vp.size.y /2
	
	var limit_right = -( geom.get_node(\"CameraLimitLeft\").position.x - vp.size.x /2)
	var limit_left = -( geom.get_node(\"CameraLimitRight\").position.x - vp.size.x /2)
	var limit_bottom = -(geom.get_node(\"CameraLimitTop\").position.y - vp.size.y /2)
	var limit_top = -(geom.get_node(\"CameraLimitBottom\").position.y - vp.size.y /2)
	
	# horiz
	
	var h_left_edge = 0
	var h_left_marg = vp.size.x * horiz_margin
	var h_right_edge = vp.size.x
	var h_right_marg = vp.size.x * (1 - horiz_margin)
	
	var horiz_speed = 0
	if mp.x < h_left_marg:
		var power = (h_left_marg - mp.x) /  (vp.size.x * horiz_margin)
		horiz_speed = - lerp(min_speed, max_speed, power)
		
	if mp.x > h_right_marg:
		var power = (mp.x - h_right_marg) /  (vp.size.x * (horiz_margin))
		horiz_speed = lerp(min_speed, max_speed, power)
		
	offset.x -= horiz_speed*delta
	
	# vert
	
	var h_top_edge = 0
	var h_top_marg = vp.size.y * verti_margin
	var h_bottom_edge = vp.size.y
	var h_bottom_marg = vp.size.y * (1 - verti_margin)
	
	var verti_speed = 0
	if mp.y < h_top_marg:
		var power = (h_top_marg - mp.y) /  (vp.size.y * verti_margin)
		verti_speed = - lerp(min_speed, max_speed, power)
		
	if mp.y > h_bottom_marg:
		var power = (mp.y - h_bottom_marg) /  (vp.size.y * (verti_margin))
		verti_speed = lerp(min_speed, max_speed, power)
		
	offset.y -= verti_speed*delta
	
	offset.x = max(offset.x, limit_left + vp.size.x/2)
	offset.x = min(offset.x, limit_right - vp.size.x/2)
	offset.y = max(offset.y, limit_top + vp.size.y /2)
	offset.y = min(offset.y, limit_bottom - vp.size.y /2)
"

[node name="RoomSwitcher" type="Node"]
script = SubResource( 1 )

[node name="RoomLayer" type="CanvasLayer" parent="."]
layer = 50
follow_viewport_enable = true
script = SubResource( 2 )

[node name="WarpMenu" parent="." instance=ExtResource( 1 )]
