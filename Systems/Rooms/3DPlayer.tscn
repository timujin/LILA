[gd_scene load_steps=8 format=2]

[ext_resource path="res://Assets/Sprites/Icons/reticule_off.png" type="Texture" id=1]
[ext_resource path="res://Assets/Sprites/Icons/reticule_on.png" type="Texture" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody

var frozen = false
var off_camera = false

const GRAVITY = -24.8
var vel = Vector3() # TODO make this 0 on freeze
const MAX_SPEED = 20
const JUMP_SPEED = 9
const ACCEL = 4.5

var dir = Vector3()

const DEACCEL= 16
const MAX_SLOPE_ANGLE = 40

var camera
var rotation_helper

var MOUSE_SENSITIVITY = 0.05

export var temp_look_target:NodePath

func _ready():
	camera = $RotationHelper/Camera
	rotation_helper = $RotationHelper

	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
	
func camera_look(at):
	self.frozen = true
	camera.look(at)
	off_camera = true
	
func camera_unlook():
	self.frozen = false
	camera.unlook()
	off_camera = false

func _physics_process(delta):
	process_input(delta)
	process_movement(delta)

func process_input(delta):

	if not frozen:
		# ----------------------------------
		# Walking
		dir = Vector3()
		var cam_xform = camera.get_global_transform()
	
		var input_movement_vector = Vector2()
	
		if Input.is_action_pressed(\"movement_forward\"):
			input_movement_vector.y += 1
		if Input.is_action_pressed(\"movement_backward\"):
			input_movement_vector.y -= 1
		if Input.is_action_pressed(\"movement_left\"):
			input_movement_vector.x -= 1
		if Input.is_action_pressed(\"movement_right\"):
			input_movement_vector.x += 1
	
		input_movement_vector = input_movement_vector.normalized()
	
		# Basis vectors are already normalized.
		dir += -cam_xform.basis.z * input_movement_vector.y
		dir += cam_xform.basis.x * input_movement_vector.x
		# ----------------------------------
	
		# ----------------------------------
		# Jumping
		if is_on_floor():
			if Input.is_action_just_pressed(\"movement_jump\"):
				vel.y = JUMP_SPEED
		# ----------------------------------

	# ----------------------------------
	# Capturing/Freeing the cursor
	if Input.is_action_just_pressed(\"ui_cancel\"):
		if Input.get_mouse_mode() == Input.MOUSE_MODE_VISIBLE:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
	# ----------------------------------

func process_movement(delta):
	dir.y = 0
	dir = dir.normalized()

	vel.y += delta * GRAVITY

	var hvel = vel
	hvel.y = 0

	var target = dir
	target *= MAX_SPEED

	var accel
	if dir.dot(hvel) > 0:
		accel = ACCEL
	else:
		accel = DEACCEL

	hvel = hvel.linear_interpolate(target, accel * delta)
	vel.x = hvel.x
	vel.z = hvel.z
	vel = move_and_slide(vel, Vector3(0, 1, 0), 0.05, 4, deg2rad(MAX_SLOPE_ANGLE))

func _input(event):	
	if event is InputEventKey and event.pressed and event.scancode == KEY_L and not event.echo:
		if off_camera: camera_unlook()
		else: camera_look(get_node(temp_look_target))
		
	if frozen: return
	
	
	
	if event is InputEventMouseMotion and Input.get_mouse_mode() == Input.MOUSE_MODE_CAPTURED:
		rotation_helper.rotate_x(deg2rad(event.relative.y * MOUSE_SENSITIVITY))
		self.rotate_y(deg2rad(event.relative.x * MOUSE_SENSITIVITY * -1))

		var camera_rot = rotation_helper.rotation_degrees
		camera_rot.x = clamp(camera_rot.x, -70, 70)
		rotation_helper.rotation_degrees = camera_rot
"

[sub_resource type="CapsuleShape" id=2]
radius = 0.63731
height = 0.619577

[sub_resource type="BoxShape" id=3]
extents = Vector3( 0.0861433, 0.0238361, 0.0991925 )

[sub_resource type="GDScript" id=4]
script/source = "extends Camera

export(NodePath) var cursor
export(Texture) var reticule_off
export(Texture) var reticule_on

var look_disabled = false

var target_body = null


func _process(delta):
	process_movement(delta)
	
	if look_disabled: return
	
	var ray =  get_parent().get_node(\"RayCast\")
	ray.force_raycast_update()

	if ray.is_colliding():
		var body = ray.get_collider()
		#print(\"Hit\", body)
		var hit = ray.get_collision_point()
		#print(\"Hit\", body)
		get_node(cursor).visible = true
		#get_node(cursor).global_transform.origin = hit
		#print(\"Class\",body.get_class())
		#if body.is_class(\"ClickableMesh\"):
		if body.has_method(\"on_clickable_mesh_clicked\"):
			get_node(cursor).texture = reticule_on
			target_body = body
		else:
			get_node(cursor).texture = reticule_off
			target_body = null
	else:
		get_node(cursor).texture = reticule_off
		target_body = null


func _input(event):
	if event is InputEventMouseButton and event.is_pressed() and Input.is_action_pressed(\"activate\") and target_body != null:
		target_body.on_clickable_mesh_clicked()
		


##########################################
# Camera movement to look at things
##########################################

export var temp_look_target:NodePath

var target = null
var speed = 3
var is_moving = false

func look(target):
	self.target = target
	is_moving = true
	look_disabled = true
		
func unlook():
	self.target = $\"../CameraOriginalPosition\"
	is_moving = false
	look_disabled = false
	
func process_movement(delta):
	if target == null: return
	global_transform.origin = lerp(global_transform.origin, target.global_transform.origin, delta*speed)
	var current_rotation = Quat(global_transform.basis)
	var next_rotation = current_rotation.slerp(Quat(target.global_transform.basis), delta*speed)
	global_transform.basis = Basis(next_rotation)
"

[sub_resource type="SpatialMaterial" id=5]
params_billboard_mode = 1

[node name="Player" type="KinematicBody"]
script = SubResource( 1 )

[node name="Body" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, 1, 0, -1, -1.62921e-07, 0, 0.956254, 0 )
shape = SubResource( 2 )

[node name="Feet" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.00156316, 0.0237565, -0.00175264 )
shape = SubResource( 3 )

[node name="RotationHelper" type="Spatial" parent="."]
transform = Transform( 1, 0, 0, 0, 0.99995, 0.00996566, 0, -0.00996566, 0.99995, 0, 1.74801, 0 )

[node name="Camera" type="Camera" parent="RotationHelper"]
transform = Transform( -1, -5.32907e-15, 3.25841e-07, -1.77636e-15, 1, 7.45058e-09, -3.25841e-07, 7.45058e-09, -1, 0, 0.0228175, 0.133492 )
current = true
script = SubResource( 4 )
cursor = NodePath("../../3DCursor")
reticule_off = ExtResource( 1 )
reticule_on = ExtResource( 2 )

[node name="CameraOriginalPosition" type="Camera" parent="RotationHelper"]
transform = Transform( -1, -5.32907e-15, 3.25841e-07, -1.77636e-15, 1, 7.45058e-09, -3.25841e-07, 7.45058e-09, -1, 0, 0.0228175, 0.133492 )

[node name="RayCast" type="RayCast" parent="RotationHelper"]
transform = Transform( 1, 0, 0, 0, -1.56462e-07, 1, 0, -1, -1.56462e-07, 0, 0.0156274, 0.132032 )
cast_to = Vector3( 0, -2.5, 0 )
collide_with_areas = true

[node name="3DCursor_td" type="Sprite3D" parent="."]
transform = Transform( 0.0737516, 0, 0, 0, 0.0737516, 0, 0, 0, -0.0331146, 0.0148448, -0.00510657, 5.85694 )
material_override = SubResource( 5 )
texture = ExtResource( 1 )

[node name="3DCursor" type="TextureRect" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -12.0
margin_top = -12.0
margin_right = 12.0
margin_bottom = 12.0
texture = ExtResource( 1 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}
