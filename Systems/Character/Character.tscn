[gd_scene load_steps=6 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

\"\"\"
Stores inventory, quests, etc. All the data associated with the PC.
This is intended to be deserialized into a save file *in entirety*.
\"\"\"

onready var inventory = get_node(\"Inventory\")
onready var pickles = get_node(\"Pickles\")
onready var objects = get_node(\"SerializedObjects\")
onready var rooms = get_node(\"SerializedRooms\")
onready var variables = get_node(\"Variables\")
"

[sub_resource type="GDScript" id=2]
script/source = "extends Node

# adding item
# checking item
# removing item
# getting all items by predicate ???
# TODO

signal item_added (item)
signal inventory_updated

func get_all_items():
	return self.get_children()

func search_all_items_by_id(id:String):
	var res = []
	for item in get_children():
		if item.id == id:
			res.append(item)
	return res
	
func search_item_by_id(id:String):
	var res = search_all_items_by_id(id)
	if res.size() == 0:
		return null
	elif res.size() == 1:
		return res[0]
	else:
		printerr(\"More than 1 candidate for item: %s\" % id)
		return res[0]

func add_item_by_id(id:String, allow_duplicate=false):
	if (not allow_duplicate) and has_item_by_id(id):
		return search_item_by_id(id)
	var prototype = BaseItem.load_by_id(id)
	prototype.connect(\"item_updated\", self, \"emit_signal\", [\"inventory_updated\"])
	return add_item(prototype)
	
func add_item(scene):
	var res = scene.instance()
	self.add_child(res)
	emit_signal(\"item_added\", res)
	emit_signal(\"inventory_updated\")
	return res
	
func has_item_by_id(id:String):
	return search_item_by_id(id) != null

func add_number_items(id:String, number:int):
	assert(number >= 0)
	var candidate = search_item_by_id(id)
	if candidate == null:
		candidate = add_item_by_id(id)
	candidate.add_count(number)
	
func is_enough_items(id:String, number:int):
	assert(number >= 0)
	var candidate = search_item_by_id(id)
	if candidate == null:
		return false
	return candidate.is_enough(number)
	
func lose_items(id:String, number, cleanup=true):
	assert(number >= 0)
	var candidate = search_item_by_id(id)
	if candidate == null:
		printerr(\"Not enough items to remove: %s\" % id)
		return
	candidate.remove_count(number, cleanup)
	
	
func _ready():
	pass
	
"

[sub_resource type="GDScript" id=3]
script/source = "extends Node

\"\"\"
Stores generic global variables. 
Used for event flags, storyline control, etc.
All the things that can't be represented elsewhere.
Should use serializable types - preferably Strings, Ints, Bools, etc.
These are invisible to the player. If you want to control items that are
visible to the player, use Inventory.
\"\"\"

signal value_changed(key, old_value, new_value)

export var default_values:Dictionary = {}

var values:Dictionary = {}

func set_value(key:String, value):
	var old = get_value(key)
	values[key] = value
	emit_signal(\"value_changed\", key, old, value)
	
func get_value(key:String, default=null):
	if values.has(key):
		return values[key]
	else:
		if default_values.has(key):
			return default_values[key]
		else:
			return default
		
"

[sub_resource type="GDScript" id=4]
script/source = "extends Node

\"\"\"
Stores the state of objects in rooms. 
Obsolete?
\"\"\"

var stored_rooms:Dictionary = {}

func serialize(roomid:String, nodepath:NodePath, data:Dictionary):
	if not stored_rooms.has(roomid):
		stored_rooms[roomid] = {}
	stored_rooms[roomid][nodepath] = data
	print(\"Stored: %s - %s - %s\" % [roomid, nodepath, str(data)])
	
	
	
func deserialize(roomid:String, nodepath:NodePath, default:Dictionary):
	if not stored_rooms.has(roomid):
		return default
	if not stored_rooms[roomid].has(nodepath):
		return default
	return stored_rooms[roomid][nodepath]

"

[sub_resource type="GDScript" id=5]
script/source = "extends Node


var stored_rooms:Dictionary = {}

func serialize(roomid:String, data:Dictionary):
	if not stored_rooms.has(roomid):
		stored_rooms[roomid] = {}
	stored_rooms[roomid] = data
	print(\"Stored: %s - %s\" % [roomid, str(data)])
	
	
	
func deserialize(roomid, default):
	print(\"default\", default)
	if not stored_rooms.has(roomid):
		print(\"returning defaukt\")
		return default
	print(\"returning stored\")
	return stored_rooms[roomid]

"

[node name="Character" type="Node"]
script = SubResource( 1 )

[node name="Inventory" type="Node" parent="."]
script = SubResource( 2 )

[node name="Variables" type="Node" parent="."]
script = SubResource( 3 )

[node name="SerializedObjects" type="Node" parent="."]
script = SubResource( 4 )

[node name="SerializedRooms" type="Node" parent="."]
script = SubResource( 5 )
