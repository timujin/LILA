[gd_scene load_steps=5 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

\"\"\"
Stores inventory, quests, etc. All the data associated with the PC.
This is intended to be deserialized into a save file *in entirety*.
\"\"\"

onready var inventory = get_node(\"Inventory\")
#onready var karma = get_node(\"Karma\")
onready var pickles = get_node(\"Pickles\")
onready var variables = get_node(\"Variables\")

# Add Journal entities: quests, map, notes, etc...
"

[sub_resource type="GDScript" id=4]
script/source = "extends Node

\"\"\"
Stores generic global variables. 
Used for event flags, storyline control, etc.
All the things that can't be represented elsewhere.
Should use serializable types - preferably Strings, Ints, Bools, etc.
\"\"\"

signal value_changed(key, old_value, new_value)

export var default_values:Dictionary = {}

var values:Dictionary = {}

func set_value(key:String, value):
	var old = get_value(key)
	values[key] = value
	emit_signal(\"value_changed\", key, old, value)
	
func get_value(key:String, default=null):
	if values.has(key):
		return values[key]
	else:
		if default_values.has(key):
			return default_values[key]
		else:
			return default
		
"

[sub_resource type="GDScript" id=5]
script/source = "extends Node

var pickled_rooms:Dictionary = {}

func pickle(roomid:String, nodepath:NodePath, data:Dictionary):
	if not pickled_rooms.has(roomid):
		pickled_rooms[roomid] = {}
	pickled_rooms[roomid][nodepath] = data
	print(\"Pickled: %s - %s - %s\" % [roomid, nodepath, str(data)])
	
	
	
func unpickle(roomid:String, nodepath:NodePath, default:Dictionary):
	if not pickled_rooms.has(roomid):
		return default
	if not pickled_rooms[roomid].has(nodepath):
		return default
	return pickled_rooms[roomid][nodepath]

"

[sub_resource type="GDScript" id=6]
script/source = "extends Node

# adding item
# checking item
# removing item
# getting all items by predicate ???
"

[node name="Character" type="Node"]
script = SubResource( 1 )

[node name="Variables" type="Node" parent="."]
script = SubResource( 4 )

[node name="Pickles" type="Node" parent="."]
script = SubResource( 5 )

[node name="Inventory" type="Node" parent="."]
script = SubResource( 6 )
