[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node


func _ready():
	print(\"Mode controller ready\")

# Click blocking (to prevent race conditions with user input)

var clicks_blocked = false setget set_block_clicks

func set_block_clicks(value):
	clicks_blocked = value
	$ClickBlocker/Panel.visible = value


######
# INTERACTION
######

var window = null

func start_interaction(left:bool):
	if window != null:
		stop_interaction()
	window = preload(\"res://Systems/Cutscenes/SideDialogue/SideDialogue.tscn\").instance()
	get_node(\"/root\").add_child(window)
	if left:
		window.display_to_the_left()
	else:
		window.display_to_the_right()
		
	return window
	
func start_interaction_left():
	return start_interaction(true)
	
func start_interaction_right():
	return start_interaction(false)
	
func stop_interaction():
	if window != null:
		window.queue_free()
		window = null

\"\"\"

signal reset
signal mode_changed (mode)
signal hide_hud
signal show_hud

func reset():
	set_mode(EXPLORE)
	unhover()
	emit_signal(\"reset\")

############
# Base mode
############

enum {EXPLORE, MENU, CUTSCENE, INTERACTION}

var mode = EXPLORE
func set_mode(value):
	if [EXPLORE, MENU, CUTSCENE, INTERACTION].has(value):
		mode = value
		emit_signal(\"mode_changed\", mode)
	else:
		printerr(\"Invalid mode: \" + str(value))
		assert(false)

var hud_hidden = false setget set_hud_hidden
func set_hud_hidden(value):
	hud_hidden = value
	if value:
		emit_signal(\"hide_hud\")
	else:
		emit_signal(\"show_hud\")

func start_cutscene():
	reset()
	set_hud_hidden(true)
	set_mode(CUTSCENE)
	
func stop_cutscene():
	reset()
	set_hud_hidden(false)
	set_mode(EXPLORE)

#########
# Helper logical functions.
# I put them here to be able to change the logic 
# when the mode becomes too large.
#########

func is_room_scrollable():
	return mode == EXPLORE

func is_menu_openable():
	return mode == EXPLORE and hud_hidden == false

\"\"\"

##########
# Trying to resolve interactable hover conflicts
##########

var currently_hovered = null

func hover(area, hidden):
	currently_hovered = area
	if not hidden:
		Input.set_default_cursor_shape(Input.CURSOR_POINTING_HAND)
	
func unhover():
	currently_hovered = null
	Input.set_default_cursor_shape(Input.CURSOR_ARROW)
	
"

[node name="ModeController" type="Node"]
script = SubResource( 1 )

[node name="ClickBlocker" type="CanvasLayer" parent="."]
layer = 120

[node name="Panel" type="Panel" parent="ClickBlocker"]
visible = false
modulate = Color( 1, 1, 1, 0 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}
