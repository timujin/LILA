[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

\"\"\"
This module is sort of obsolete\\redundant.
Its main purpose is to tell if the player can scroll the room.
\"\"\"

signal reset
signal mode_changed (mode)
signal hide_hud
signal show_hud

func reset():
	set_mode(EXPLORE)
	unhover()
	emit_signal(\"reset\")

############
# Base mode
############

\"\"\"
EXPLORE - basic mode where you interact with stuff in a Room.
MENU - A HUD window has been opened, s/a Inventory, Journal, etc.
CUTSCENE - Self-explanatory. Menus not openable and room is not interactable. Interaction within cutscene is allowed.
INTERACTION - the West of Loathing style modal interaction window is open
\"\"\"

enum {EXPLORE, MENU, CUTSCENE, INTERACTION}

var mode = EXPLORE
func set_mode(value):
	if [EXPLORE, MENU, CUTSCENE, INTERACTION].has(value):
		mode = value
		emit_signal(\"mode_changed\", mode)
	else:
		printerr(\"Invalid mode: \" + str(value))
		assert(false)

var hud_hidden = false setget set_hud_hidden
func set_hud_hidden(value):
	hud_hidden = value
	if value:
		emit_signal(\"hide_hud\")
	else:
		emit_signal(\"show_hud\")

func start_cutscene():
	reset()
	set_hud_hidden(true)
	set_mode(CUTSCENE)
	
func stop_cutscene():
	reset()
	set_hud_hidden(false)
	set_mode(EXPLORE)

######
# INTERACTION
######

var window

func start_interaction():
	reset()
	set_hud_hidden(true)
	set_mode(INTERACTION)
	window = preload(\"res://Systems/Cutscenes/WOLModal/WOLModal.tscn\").instance()
	get_node(\"/root\").add_child(window)
	return window
	
func stop_interaction():
	reset()
	set_hud_hidden(false)
	set_mode(EXPLORE)
	if window != null:
		window.queue_free()
		window = null

#########
# Helper logical functions.
# I put them here to be able to change the logic 
# when the mode becomes too large.
#########

func is_room_scrollable():
	return mode == EXPLORE

func is_menu_openable():
	return mode == EXPLORE and hud_hidden == false

##########
# Trying to resolve interactable hover conflicts
##########

var currently_hovered = null

func hover(area, hidden):
	currently_hovered = area
	if not hidden:
		Input.set_default_cursor_shape(Input.CURSOR_POINTING_HAND)
	
func unhover():
	currently_hovered = null
	Input.set_default_cursor_shape(Input.CURSOR_ARROW)
	
	
"

[node name="ModeController" type="Node"]
script = SubResource( 1 )
