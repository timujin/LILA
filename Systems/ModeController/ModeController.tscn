[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node

signal reset
signal mode_changed (mode)
signal hide_hud
signal show_hud

func reset():
	set_mode(EXPLORE)
	emit_signal(\"reset\")

############
# Base mode
############

\"\"\"
EXPLORE - basic mode where you interact with stuff in a Room.
MENU - A HUD window has been opened, s/a Inventory, Journal, etc.
CUTSCENE - Self-explanatory. Menus not openable and room is not interactable. Interaction within cutscene is allowed.
\"\"\"

enum {EXPLORE, MENU, CUTSCENE}

var mode = EXPLORE
func set_mode(value):
	if [EXPLORE, MENU, CUTSCENE].has(value):
		mode = value
		emit_signal(\"mode_changed\", mode)
	else:
		printerr(\"Invalid mode: \" + str(value))
		assert(false)

var hud_hidden = false setget set_hud_hidden
func set_hud_hidden(value):
	hud_hidden = value
	if value:
		emit_signal(\"hide_hud\")
	else:
		emit_signal(\"show_hud\")

func start_cutscene():
	reset()
	set_hud_hidden(true)
	set_mode(CUTSCENE)
	
func stop_cutscene():
	reset()
	set_hud_hidden(false)
	set_mode(EXPLORE)

#########
# Helper logical functions.
# I put them here to be able to change the logic 
# when the mode becomes too large.
#########

func is_room_scrollable():
	return mode == EXPLORE

func is_menu_openable():
	return mode == EXPLORE and hud_hidden == false

############
# Item holding
############
\"\"\"
var holding_item = null
var holding_action = null
var holding_callback = null

func get_is_player_holding_item():
	return (holding_item != null)
	
func hold(item, script, callback_str):
	#reset()
	holding_item = item
	holding_action = script
	holding_callback = callback_str
	var icon = item.species.icon
	$HeldItemCursor.unhide(icon)
	
	
func apply_item(obj):
	if get_is_player_holding_item():
		holding_action.call(holding_callback, obj)
	else:
		printerr(\"No item held!\")

func drop_held_item():
	holding_item = null
	holding_action = null
	holding_callback = null
	$HeldItemCursor.hide()
	
func _input (  event:InputEvent ) :
	if !(self.get_is_player_holding_item()):
		return
	if not event is InputEventMouseButton:
		return
	if event.button_index != BUTTON_RIGHT or not event.pressed:
		return
	
	get_tree().set_input_as_handled()
	drop_held_item()
\"\"\"
"

[node name="ModeController" type="Node"]
script = SubResource( 1 )
