[gd_scene load_steps=8 format=2]

[ext_resource path="res://BasicEntities/Room/BaseRoom.tscn" type="PackedScene" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends BaseRoom

func get_room_name()->String:
	return \"Bardo\"
	
func get_contains_player()->bool:
	return false
	
func get_ui_enabled()->bool:
	return false
	
func get_default_parameters()->Dictionary:
	return {}
func get_player_spawn_point()->String:
	return \"DefaultSpiritSpawn\"
		
################################

func render()->void:
	pass
		
		
		
		
		
		
		
"

[sub_resource type="GDScript" id=2]
script/source = "extends Node

signal user_proceed

var state
var complete: = false
onready var reply_buttons = $\"../Dialogue/Margin/VBoxContainer/Replies\"

enum Speaker { GEE, GLD, TAS }

func say(speaker:int, text:String):
	$\"../Dialogue/Margin/VBoxContainer/Says\".say(speaker, text)
	
func scenario():
	reply_buttons.clear()
	var dialogue_tree: Dictionary = $DialogueTree.tree
	var current_branch: Dictionary = dialogue_tree[\"start\"]
	while true:
		var says = current_branch[\"says\"]
		for item in says:
			say(item[0],item[1])
			yield(self,\"user_proceed\")
		if current_branch.has(\"replies\"):
			reply_buttons.show_replies(current_branch[\"replies\"].keys())
			var reply = yield(reply_buttons, \"player_reply\")
			if current_branch[\"replies\"][reply] == \"\":
				break
			if not current_branch[\"replies\"].has(reply):
				printerr(\"Reply not in dialogue tree: %s!\" % reply)
			else:
				current_branch = dialogue_tree[current_branch[\"replies\"][reply]]
				reply_buttons.clear()
				say(Speaker.TAS,reply)
				yield(self,\"user_proceed\")
		elif current_branch.has(\"next\"):
			if current_branch[\"next\"] == \"\":
				break
			current_branch = dialogue_tree[current_branch[\"next\"]]
		else:
			printerr(\"Dialogue tree incoherent\")
	#get_node(\"../ColorRect/AnimationPlayer\").play(\"Fadein\")
	#yield(get_node(\"../ColorRect/AnimationPlayer\"), \"animation_finished\")
	get_tree().change_scene(\"res://Locations/FortressOfChains/SpiritSummoningRoom.tscn\")

# Called when the node enters the scene tree for the first time.
func _ready():
	state = scenario()
	
func _input(event):
	if Input.is_action_pressed(\"ui_proceed\"):
		if $\"../Dialogue/Margin/VBoxContainer/Says\".currently_typing:
			$\"../Dialogue/Margin/VBoxContainer/Says\".autocomplete()
		else:
			emit_signal(\"user_proceed\")

func proceed():
	print(\"Proceed\")
	#if not complete:
	#	state = state.resume()
	#else:
	#	print(\"Scenario complete\")

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="GDScript" id=3]
script/source = "extends Node
enum Speaker { GEE, GLD, TAS }

var tree = {
	\"start\": {
		\"says\": [
			[Speaker.TAS, \"There is nothing\"],
			[Speaker.TAS, \"Cold, empty darkness\"],
			[Speaker.TAS, \"Forever\"],
			[Speaker.TAS, \"There was nothing, and there will be nothing\"],
			[Speaker.TAS, \"Not even time itself exists\"],
			[Speaker.TAS, \"Not even the concept of existence\"],
			[Speaker.TAS, \"This is it\"],
			[Speaker.TAS, \"This is the perfect universe\"],
			[Speaker.TAS, \"A completely empty one\"],
			[Speaker.TAS, \"No pain\"],
			[Speaker.TAS, \"No suffering\"],
			[Speaker.TAS, \"No worries\"],
			[Speaker.TAS, \"Nothing\"],
			[Speaker.TAS, \"Perfect\"],
			[Speaker.GEE, \"\\\"I don't know about that. Sounds pretty boring.\\\"\"]	
		],
		\"replies\": {
			\"Who is this?\": \"goon\",
			\"Wait, wait?!\": \"goon\",
			\"Huh?\": \"goon\",
		}
	},

	\"goon\": {
		\"says\": [
			[Speaker.TAS, \"\\\"Who is talking?\\\"\"],
			[Speaker.TAS, \"\\\"Who am I?\\\"\"],
			[Speaker.TAS, \"\\\"What's going on?\\\"\"],
			[Speaker.TAS, \"\\\"What's what?\\\"\"],
			[Speaker.TAS, \"\\\"What's anything?\\\"\"],
			[Speaker.GEE, \"\\\"Shhhhh...\\\"\"],
			[Speaker.GEE, \"\\\"Shhhhhhhhhhh...\\\"\"],
			[Speaker.GEE, \"\\\"It's okay.\\\"\"],
			[Speaker.TAS, \"\\\"It's not okay!\\\"\"],
			[Speaker.TAS, \"\\\"The universe was supposed to be empty.\\\"\"],
			[Speaker.TAS, \"\\\"So who's talking?\\\"\"],
			[Speaker.TAS, \"\\\"And who's listening?\\\"\"],
			[Speaker.GLD, \"\\\"You have been granted life. At least pretend to be grateful.\\\"\"],
			# Why would GLD consider life a gift?
			# \"Life is a chain. Death is liberation..
		],
		\"replies\": {
			\"\\\"I am grateful, but...\\\"\": \"grateful butt\",
			\"\\\"Why would I be grateful?\\\"\": \"why grateful\",
		}
	},
	\"grateful butt\": {
		\"says\": [
			[Speaker.TAS, \"\\\"I don't even know who I am.\\\"\"],
			[Speaker.TAS, \"\\\"I'm not even convinced I exist.\\\"\"],
			[Speaker.GLD, \"\\\"You exist. I made sure of it.\\\"\"],
		],
		\"next\": \"who are you anyway\"
	},
	\"why grateful\": {
		\"says\": [
			[Speaker.TAS, \"\\\"I was doing just fine in my oblivion thank you very much.\\\"\"],
			[Speaker.GEE, \"\\\"Didn't you find it boring?\\\"\"],
			[Speaker.TAS, \"\\\"No! I didn't even exist. There was nothing to experience boredom.\\\"\"],
			[Speaker.GEE, \"\\\"Didn't you find it pointless?\\\"\"],
			[Speaker.TAS, \"\\\"That's a good thing!\\\"\"],
		],
		\"next\": \"who are you anyway\"
	},
	\"who are you anyway\": {
		\"says\": [
			[Speaker.TAS, \"\\\"Who are you guys anyway?\\\"\"],
			[Speaker.GLD, \"\\\"I am the God of Life and Death.\\\"\"],
			[Speaker.GEE, \"\\\"I am the Goddess of Everything Else.\\\"\"],
			[Speaker.TAS, \"Blah blah unfinished dialogue\"],
		],
		\"replies\": {
			\"Proceed\": \"\",
		}
	},
}"

[sub_resource type="GDScript" id=4]
script/source = "extends VBoxContainer

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"

const max_length = 13
var barks = []
var currently_typing:= false

#export(PackedScene) var sayBox
# Called when the node enters the scene tree for the first time.
func _ready():
	get_node(\"/root/Room/Director\").proceed()

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
enum Speaker { GEE, GLD, TAS }

func say(speaker:int, text:String):
	var clone = $SayPrototype.duplicate()
	var t = \"ERR\"
	if speaker == Speaker.GEE:
		t = \"[color=red]%s[/color]\" % text
	elif speaker == Speaker.GLD:
		t = \"[right][color=blue]%s[/color][/right]\" % text
	elif speaker == Speaker.TAS:
		t = \"[center][color=white]%s[/color][/center]\" % text
	else:
		t = \"ERROR: INVALID SPEAKER: %d\" % speaker
	clone.bbcode_text = t
	add_child(clone)
	clone.percent_visible = 0
	
	# TODO: fix the lettering so that it goes at a steady pace regardless of the label's length
	
	clone.get_node(\"AnimationPlayer\").play(\"Lettering\")
	barks.append(clone)
	clone.visible = true
	currently_typing = true
	clean_up()
	
func autocomplete():
	if barks.size() == 0:
		return
	barks[-1].get_node(\"AnimationPlayer\").stop()
	barks[-1].percent_visible = 1
	currently_typing = false
	
func clean_up():
	if barks.size() > max_length:
		barks[0].queue_free()
		barks.remove(0)
		clean_up()
		
func letteringend():
	currently_typing = false"

[sub_resource type="Animation" id=5]
tracks/0/type = "value"
tracks/0/path = NodePath(".:percent_visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/1/type = "method"
tracks/1/path = NodePath("..")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "letteringend"
} ]
}
tracks/2/type = "method"
tracks/2/path = NodePath("../../../../../Director")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"values": [ {
"args": [  ],
"method": "proceed"
} ]
}

[sub_resource type="GDScript" id=6]
script/source = "extends VBoxContainer

signal player_reply

# Called when the node enters the scene tree for the first time.
func _ready():
	#show_replies([\"123\", \"456\"])
	pass # Replace with function body.

# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func show_replies(texts : Array):
	if texts.size() < 0:
		printerr(\"Invalid value for show_replies\")
		return
	if texts.size() > 4:
		printerr(\"More than 4 replies not supported; Provided: %d\" % texts.size())
		return
	$r0.visible = false
	$r1.visible = false
	$r2.visible = false
	$r3.visible = false
	
	if texts.size() > 0:
		$r0.visible = true
		$r0.text = texts[0]
	if texts.size() > 1:
		$r1.visible = true
		$r1.text = texts[1]
	if texts.size() > 2:
		$r2.visible = true
		$r2.text = texts[2]
	if texts.size() > 3:
		$r3.visible = true
		$r3.text = texts[3]
		
func clear():
	return show_replies([])
	
func click_reply(i:int):
	print(\"Click reply\")
	if (i < 0) or (i>3):
		printerr(\"Trying to click: %d\" % i)
		return
	emit_signal(\"player_reply\", get_node(\"r%d\"%i).text)
		

func player_click(extra_arg_0):
	click_reply(extra_arg_0)


func _on_r0_pressed():
	pass # Replace with function body.
"

[node name="Room" instance=ExtResource( 1 )]
script = SubResource( 1 )

[node name="Director" type="Node" parent="." index="0"]
script = SubResource( 2 )

[node name="DialogueTree" type="Node" parent="Director" index="0"]
script = SubResource( 3 )

[node name="Background" parent="." index="1"]
editor/display_folded = true

[node name="ColorRect" type="ColorRect" parent="Background" index="0"]
margin_left = -276.0
margin_top = -185.0
margin_right = 1975.0
margin_bottom = 1162.0
color = Color( 0, 0, 0, 1 )

[node name="Geometry" parent="." index="2"]
editor/display_folded = true

[node name="RailroadLeft" parent="Geometry" index="0"]
position = Vector2( 14.4199, 648.907 )

[node name="RailroadRight" parent="Geometry" index="1"]
position = Vector2( 1622.27, 710.193 )

[node name="CameraLimitLeft" parent="Geometry" index="2"]
position = Vector2( 11.4916, 648.799 )

[node name="CameraLimitRight" parent="Geometry" index="3"]
position = Vector2( 1624.84, 696.905 )

[node name="DefaultSpiritSpawn" parent="Geometry" index="4"]
position = Vector2( 790.071, 1124.38 )

[node name="Dialogue" type="Control" parent="." index="3"]
margin_right = 1608.0
margin_bottom = 909.0

[node name="Margin" type="MarginContainer" parent="Dialogue" index="0"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 50.0
margin_top = 50.0
margin_right = -50.0
margin_bottom = -50.0

[node name="VBoxContainer" type="VBoxContainer" parent="Dialogue/Margin" index="0"]
margin_right = 1508.0
margin_bottom = 809.0

[node name="Says" type="VBoxContainer" parent="Dialogue/Margin/VBoxContainer" index="0"]
margin_right = 1508.0
margin_bottom = 724.0
size_flags_horizontal = 3
size_flags_vertical = 3
size_flags_stretch_ratio = 9.04
alignment = 2
script = SubResource( 4 )

[node name="SayPrototype" type="RichTextLabel" parent="Dialogue/Margin/VBoxContainer/Says" index="0"]
visible = false
margin_top = 688.0
margin_right = 1508.0
margin_bottom = 713.0
rect_min_size = Vector2( 0, 25 )
size_flags_horizontal = 3
bbcode_enabled = true
bbcode_text = "[color=red]fdsfdsfsdffsdfsf[/color] 
"
text = "fdsfdsfsdffsdfsf 
"

[node name="AnimationPlayer" type="AnimationPlayer" parent="Dialogue/Margin/VBoxContainer/Says/SayPrototype" index="1"]
anims/Lettering = SubResource( 5 )

[node name="Replies" type="VBoxContainer" parent="Dialogue/Margin/VBoxContainer" index="1"]
margin_top = 728.0
margin_right = 1508.0
margin_bottom = 809.0
size_flags_horizontal = 3
size_flags_vertical = 3
script = SubResource( 6 )

[node name="r0" type="Button" parent="Dialogue/Margin/VBoxContainer/Replies" index="0"]
visible = false
margin_right = 1508.0
margin_bottom = 20.0
text = "[reply text]"
flat = true

[node name="r1" type="Button" parent="Dialogue/Margin/VBoxContainer/Replies" index="1"]
visible = false
margin_right = 1508.0
margin_bottom = 20.0
text = "[reply text]"
flat = true

[node name="r2" type="Button" parent="Dialogue/Margin/VBoxContainer/Replies" index="2"]
visible = false
margin_right = 1508.0
margin_bottom = 20.0
text = "[reply text]"
flat = true

[node name="r3" type="Button" parent="Dialogue/Margin/VBoxContainer/Replies" index="3"]
visible = false
margin_right = 1508.0
margin_bottom = 20.0
text = "[reply text]"
flat = true
[connection signal="pressed" from="Dialogue/Margin/VBoxContainer/Replies/r0" to="Dialogue/Margin/VBoxContainer/Replies" method="click_reply" binds= [ 0 ]]
[connection signal="pressed" from="Dialogue/Margin/VBoxContainer/Replies/r1" to="." method="click_reply" binds= [ 1 ]]
[connection signal="pressed" from="Dialogue/Margin/VBoxContainer/Replies/r2" to="Dialogue/Margin/VBoxContainer/Replies" method="click_reply" binds= [ 2 ]]
[connection signal="pressed" from="Dialogue/Margin/VBoxContainer/Replies/r3" to="Dialogue/Margin/VBoxContainer/Replies" method="click_reply" binds= [ 3 ]]
