[gd_scene load_steps=1 format=2]

[ext_resource id=1 path="blue_brick.png" type="Texture"]

[sub_resource id=1 type="Shader"]

resource_name = "Shader Nodetree"
code = "shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform sampler2D texture_0;


void node_bsdf_principled(vec4 color, float subsurface, vec4 subsurface_color,
        float metallic, float specular, float roughness, float clearcoat,
        float clearcoat_roughness, float anisotropy, float transmission,
        float IOR, out vec3 albedo, out float sss_strength_out,
        out float metallic_out, out float specular_out,
        out float roughness_out, out float clearcoat_out,
        out float clearcoat_gloss_out, out float anisotropy_out,
        out float transmission_out, out float ior) {
    metallic = clamp(metallic, 0.0, 1.0);
    transmission = clamp(transmission, 0.0, 1.0);

    subsurface = subsurface * (1.0 - metallic);

    albedo = mix(color.rgb, subsurface_color.rgb, subsurface);
    sss_strength_out = subsurface;
    metallic_out = metallic;
    specular_out = pow((IOR - 1.0)/(IOR + 1.0), 2)/0.08;
    roughness_out = roughness;
    clearcoat_out = clearcoat * (1.0 - transmission);
    clearcoat_gloss_out = 1.0 - clearcoat_roughness;
    anisotropy_out = clamp(anisotropy, 0.0, 1.0);
    transmission_out = (1.0 - transmission) * (1.0 - metallic);
    ior = IOR;
}


void node_tex_image(vec3 co, sampler2D ima, out vec4 color, out float alpha) {
    color = texture(ima, co.xy);
    alpha = color.a;
}

void vertex () {
}

void fragment () {
	
	// node: 'Image Texture'
	// type: 'ShaderNodeTexImage'
	// input sockets handling
	vec3 node0_in0_vector = vec3(0.0, 0.0, 0.0);
	// output sockets definitions
	vec4 node0_out0_color;
	float node0_out1_alpha;
	
	node0_in0_vector = vec3(UV, 0.0);
	node_tex_image(node0_in0_vector, texture_0, node0_out0_color, node0_out1_alpha);
	
	
	// node: 'Principled BSDF'
	// type: 'ShaderNodeBsdfPrincipled'
	// input sockets handling
	vec4 node1_in0_basecolor = node0_out0_color;
	float node1_in1_subsurface = float(0.0);
	vec3 node1_in2_subsurfaceradius = vec3(1.0, 0.20000000298023224,
		0.10000000149011612);
	vec4 node1_in3_subsurfacecolor = vec4(0.800000011920929, 0.800000011920929,
		0.800000011920929, 1.0);
	float node1_in4_metallic = float(0.0);
	float node1_in5_specular = float(0.5);
	float node1_in6_speculartint = float(0.0);
	float node1_in7_roughness = float(0.5);
	float node1_in8_anisotropic = float(0.0);
	float node1_in9_anisotropicrotation = float(0.0);
	float node1_in10_sheen = float(0.0);
	float node1_in11_sheentint = float(0.5);
	float node1_in12_clearcoat = float(0.0);
	float node1_in13_clearcoatroughness = float(0.029999999329447746);
	float node1_in14_ior = float(1.4500000476837158);
	float node1_in15_transmission = float(0.0);
	float node1_in16_transmissionroughness = float(0.0);
	vec4 node1_in17_emission = vec4(0.0, 0.0, 0.0, 1.0);
	float node1_in18_alpha = float(1.0);
	vec3 node1_in19_normal = NORMAL;
	vec3 node1_in20_clearcoatnormal = vec3(0.0, 0.0, 0.0);
	vec3 node1_in21_tangent = TANGENT;
	// output sockets definitions
	vec3 node1_bsdf_out0_albedo;
	float node1_bsdf_out1_sss_strength;
	float node1_bsdf_out3_specular;
	float node1_bsdf_out2_metallic;
	float node1_bsdf_out4_roughness;
	float node1_bsdf_out5_clearcoat;
	float node1_bsdf_out6_clearcoat_gloss;
	float node1_bsdf_out7_anisotropy;
	float node1_bsdf_out8_transmission;
	float node1_bsdf_out9_ior;
	
	node_bsdf_principled(node1_in0_basecolor, node1_in1_subsurface,
		node1_in3_subsurfacecolor, node1_in4_metallic, node1_in5_specular,
		node1_in7_roughness, node1_in12_clearcoat, node1_in13_clearcoatroughness,
		node1_in8_anisotropic, node1_in15_transmission, node1_in14_ior,
		node1_bsdf_out0_albedo, node1_bsdf_out1_sss_strength, node1_bsdf_out2_metallic,
		node1_bsdf_out3_specular, node1_bsdf_out4_roughness, node1_bsdf_out5_clearcoat,
		node1_bsdf_out6_clearcoat_gloss, node1_bsdf_out7_anisotropy,
		node1_bsdf_out8_transmission, node1_bsdf_out9_ior);
	
	
	ALBEDO = node1_bsdf_out0_albedo;
	SSS_STRENGTH = node1_bsdf_out1_sss_strength;
	SPECULAR = node1_bsdf_out3_specular;
	METALLIC = node1_bsdf_out2_metallic;
	ROUGHNESS = node1_bsdf_out4_roughness;
	CLEARCOAT = node1_bsdf_out5_clearcoat;
	CLEARCOAT_GLOSS = node1_bsdf_out6_clearcoat_gloss;
	NORMAL = node1_in19_normal;
	// uncomment it when you need it
	// TRANSMISSION = vec3(1.0, 1.0, 1.0) * node1_bsdf_out8_transmission;
	// uncomment it when you are modifing TANGENT
	// TANGENT = normalize(cross(cross(node1_in21_tangent, NORMAL), NORMAL));
	// BINORMAL = cross(TANGENT, NORMAL);
	// uncomment it when you have tangent(UV) set
	// ANISOTROPY = node1_bsdf_out7_anisotropy;
}
"

[sub_resource id=2 type="ShaderMaterial"]

resource_name = ""
shader = SubResource(1)
shader_param/texture_0 = ExtResource(1)

[sub_resource id=3 type="ArrayMesh"]

resource_name = "Cube004"
surfaces/0 = {
	"material":SubResource(2),
	"primitive":4,
	"arrays":[
		Vector3Array(0.335437, 5.68904, 4.80891, -0.335436, 5.68904, -5.11419, -0.335436, 5.68904, 4.80891, 0.335437, 5.68904, -5.11419, -0.335436, -5.88792, -5.11419, -0.335436, 5.68904, -5.11419, 0.335436, -5.88792, -5.11419, -0.335436, -5.88792, 4.80891, -0.335436, -5.88792, -5.11419, 0.335436, -5.88792, 4.80891, -0.335436, 5.68904, 4.80891, -0.335436, -5.88792, 4.80891, -0.335436, -5.88792, -5.11419, -0.335436, 5.68904, 4.80891, -0.335436, 5.68904, -5.11419, 0.335437, 5.68904, -5.11419, 0.335436, -5.88792, 4.80891, 0.335436, -5.88792, -5.11419, 0.335437, 5.68904, -5.11419, 0.335437, 5.68904, -5.11419, 0.335436, -5.88792, -5.11419, -0.335436, -5.88792, -5.11419, 0.335436, -5.88792, 4.80891, 0.335436, -5.88792, 4.80891, 0.335437, 5.68904, 4.80891, -0.335436, 5.68904, 4.80891, -0.335436, -5.88792, -5.11419, -0.335436, -5.88792, 4.80891, -0.335436, 5.68904, 4.80891, 0.335437, 5.68904, -5.11419, 0.335437, 5.68904, 4.80891, 0.335436, -5.88792, 4.80891),
		Vector3Array(0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.4022e-08, -1.0, 0.0, -1.4022e-08, -1.0, 0.0, -1.4022e-08, -1.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -3.79316e-08, 1.0, 0.0, -3.79316e-08, 1.0, 0.0, -3.79316e-08, 1.0, -1.0, 4.11885e-08, 4.15076e-09, -1.0, 4.11885e-08, 4.15076e-09, -1.0, 4.11885e-08, 4.15076e-09, 1.0, -4.11885e-08, -4.15076e-09, 1.0, -4.11885e-08, -4.15076e-09, 1.0, -4.11885e-08, -4.15076e-09, 0.0, 1.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, -1.0, 0.0, 0.0, 6.13954e-08, 1.0, 0.0, 6.13954e-08, 1.0, 0.0, 6.13954e-08, 1.0, -1.0, 4.11885e-08, 1.24523e-08, -1.0, 4.11885e-08, 1.24523e-08, -1.0, 4.11885e-08, 1.24523e-08, 1.0, -4.11885e-08, -1.24523e-08, 1.0, -4.11885e-08, -1.24523e-08, 1.0, -4.11885e-08, -1.24523e-08),
		FloatArray(-1.97012e-08, 0.0, -1.0, 1.0, -9.49006e-09, 0.0, -1.0, 1.0, -2.01812e-08, 0.0, -1.0, 1.0, -4.15157e-08, -1.0, 1.4022e-08, 1.0, -4.15157e-08, -1.0, 1.4022e-08, 1.0, -4.15157e-08, -1.0, 1.4022e-08, 1.0, 1.18592e-08, 0.0, 1.0, 1.0, 6.55171e-09, 0.0, 1.0, 1.0, 1.21087e-08, 0.0, 1.0, 1.0, 4.15157e-08, 1.0, 3.79316e-08, 1.0, 4.15157e-08, 1.0, 3.79316e-08, 1.0, 4.15157e-08, 1.0, 3.79316e-08, 1.0, 4.15076e-09, 0.0, 1.0, 1.0, 4.15077e-09, 0.0, 1.0, 1.0, 4.15076e-09, 0.0, 1.0, 1.0, 4.15076e-09, -1.2916e-07, 1.0, 1.0, 4.15076e-09, -1.2916e-07, 1.0, 1.0, 4.15076e-09, -1.2916e-07, 1.0, 1.0, -9.00998e-09, 0.0, -1.0, 1.0, -4.35095e-08, -1.0, 0.0, 1.0, -4.35095e-08, -1.0, 0.0, 1.0, -4.35095e-08, -1.0, 0.0, 1.0, 6.30217e-09, 0.0, 1.0, 1.0, 4.11885e-08, 1.0, -6.13954e-08, 1.0, 4.11885e-08, 1.0, -6.13954e-08, 1.0, 4.11885e-08, 1.0, -6.13954e-08, 1.0, 1.24523e-08, 4.67275e-08, 1.0, 1.0, 1.24523e-08, 4.67275e-08, 1.0, 1.0, 1.24523e-08, 4.67275e-08, 1.0, 1.0, 1.24523e-08, 0.0, 1.0, 1.0, 1.24523e-08, 0.0, 1.0, 1.0, 1.24523e-08, 0.0, 1.0, 1.0),
		null, ; no Vertex Colors,
		Vector2Array(-3.98491, 3.47635, -2.02819, -2.47635, -3.98491, -2.47635, -2.02819, 3.47635, -0.0714647, -2.47635, -2.02819, -2.47635, -0.0714648, 3.47635, 1.88526, -2.47635, -0.0714647, -2.47635, 1.88526, 3.47635, 3.84198, -2.47635, 1.88526, -2.47635, -0.0714647, -2.47635, 1.88526, -8.42906, -0.0714645, -8.42906, -0.0714648, 9.42906, 1.88526, 3.47635, -0.0714648, 3.47635, -2.02819, 3.47635, -2.02819, 3.47635, -0.0714648, 3.47635, -0.0714647, -2.47635, 1.88526, 3.47635, 1.88526, 3.47635, 3.84198, 3.47635, 3.84198, -2.47635, -0.0714647, -2.47635, 1.88526, -2.47635, 1.88526, -8.42906, -0.0714648, 9.42906, 1.88526, 9.42906, 1.88526, 3.47635),
		null, ; No UV2,
		null, ; No Bones,
		null, ; No Weights,
		IntArray(0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 0, 1, 18, 19, 21, 20, 6, 7, 22, 23, 25, 24, 26, 28, 27, 29, 31, 30)
	],
	"morph_arrays":[]
}

[node type="Spatial" name="Scene"]

[node name="Wall3-col" type="MeshInstance" parent="."]

mesh = SubResource(3)
visible = true
transform = Transform(-2.64301e-08, 0.0, 0.604649, 0.0, 0.604649, 0.0, -0.604649, 0.0, -2.64301e-08, 0.092294, 3.56013, -3.0)
